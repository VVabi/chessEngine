diff --git a/Cpp/src/Search/negamax.cpp b/Cpp/src/Search/negamax.cpp
index f031a98..84e7db5 100644
--- a/Cpp/src/Search/negamax.cpp
+++ b/Cpp/src/Search/negamax.cpp
@@ -127,6 +127,7 @@ int16_t negamax(chessPosition* position, uint16_t ply, uint16_t max_ply, int16_t
 	}
 
 	hashEntry hashVal      = getHashTableEntry(position->zobristHash);
+
 	uint32_t zobristHigher = (uint32_t) (position->zobristHash >> 32);
 	uint16_t zobristLower  = (uint16_t) (((uint32_t) (position->zobristHash & 0xFFFFFFFF)) >> 16);
 	if(doHashProbe){ //TODO: we should check whether another move leads to 3fold rep draw!
@@ -154,6 +155,7 @@ int16_t negamax(chessPosition* position, uint16_t ply, uint16_t max_ply, int16_t
 			}
 		}
 	}
+
 	//go to quiescence on depth 0
 	//---------------------------
 	if(depth <= 0) {
diff --git a/Cpp/src/Search/quiescence.cpp b/Cpp/src/Search/quiescence.cpp
index c153d16..b761b0f 100644
--- a/Cpp/src/Search/quiescence.cpp
+++ b/Cpp/src/Search/quiescence.cpp
@@ -67,8 +67,7 @@ int16_t negamaxQuiescence(chessPosition* position, int16_t alpha, int16_t beta,
 
 	assert(alpha < beta);
 //#ifdef EXPERIMENTAL
-	uint64_t ownKing = position->pieceTables[position->toMove][king]; //TODO: need to fix move stack first!!
-
+	uint64_t ownKing = position->pieceTables[position->toMove][king];
 	if(isFieldAttacked(position, (playerColor) (1-position->toMove), findLSB(ownKing))) {
 		chessMove mv;
 		return negamax(position, 30,31, 1, alpha, beta, &mv, false, false);
diff --git a/Cpp/src/Vabi.cpp b/Cpp/src/Vabi.cpp
index d61ad68..4b03588 100644
--- a/Cpp/src/Vabi.cpp
+++ b/Cpp/src/Vabi.cpp
@@ -72,12 +72,22 @@ int main() {
 		}
 	}
 
-	srand (time(NULL));
+	/*srand (time(NULL));
 	fillZobristHash();
-	/*runPerformanceTests();
-	return 0;*/
-	std::cout << testPerftTestSuite().passed << std::endl;
+	std::ofstream out("/home/vabi/TeX/Chess/positions.tex");
+	std::ifstream in("/home/vabi/code/chessEngine/chessGui/openingPositions.txt");
+	std::string line;
+	while(getline(in, line)){
+		if(line.at(0) == '%'){
+			continue;
+		}
+		latexOutput(line, out);
+	}*/
+
+	runPerformanceTests();
 	return 0;
+	/*std::cout << testPerftTestSuite().passed << std::endl;
+	return 0;*/
 	UIloop();
 	//00000BNR00000PKQ00000NPR00000N0P000000000000000p0qpN0npnN000000kw0000
 }
diff --git a/Cpp/src/lib/Defines/pieceTables.cpp b/Cpp/src/lib/Defines/pieceTables.cpp
index f233fa1..e7954dd 100644
--- a/Cpp/src/lib/Defines/pieceTables.cpp
+++ b/Cpp/src/lib/Defines/pieceTables.cpp
@@ -292,6 +292,28 @@ int16_t endGamepieceTables[7][2][64] = {
 				}
 		},
 		{
+#ifdef EXPERIMENTAL
+				{ //white kings
+						-100,-70,-40,-25,-25,-40,-70,-100,
+						-70,-50,-30,-10,-10,-30,-50,-70,
+						-40,-30,-10, 10, 10,-10,-30,-40,
+						-25,-10, 10, 30, 30, 10,-10,-25,
+						-25,-10, 10, 30, 30, 10,-10,-25,
+						-40,-30,-10, 10, 10,-10,-30,-40,
+						-70,-50,-30,-10,-10,-30,-50,-70,
+						-100,-70,-40,-25,-25,-40,-70,-100,
+				},
+				{ //black kings
+						-100,-70,-40,-25,-25,-40,-70,-100,
+						-70,-50,-30,-10,-10,-30,-50,-70,
+						-40,-30,-10, 10, 10,-10,-30,-40,
+						-25,-10, 10, 30, 30, 10,-10,-25,
+						-25,-10, 10, 30, 30, 10,-10,-25,
+						-40,-30,-10, 10, 10,-10,-30,-40,
+						-70,-50,-30,-10,-10,-30,-50,-70,
+						-100,-70,-40,-25,-25,-40,-70,-100,
+				}
+#else
 				{ //white kings
 						-50,-40,-30,-25,-25,-30,-40,-50,
 						-40,-30,-20,-10,-10,-20,-30,-40,
@@ -312,6 +334,7 @@ int16_t endGamepieceTables[7][2][64] = {
 						-40,-30,-20,-10,-10,-20,-30,-40,
 						-50,-40,-30,-25,-25,-30,-40,-50
 				}
+#endif
 
 		},
 		{			//non-captures
diff --git a/Cpp/src/lib/Evaluation/evaluation.cpp b/Cpp/src/lib/Evaluation/evaluation.cpp
index b419102..b61e7ca 100644
--- a/Cpp/src/lib/Evaluation/evaluation.cpp
+++ b/Cpp/src/lib/Evaluation/evaluation.cpp
@@ -13,13 +13,30 @@
 #include <stdlib.h>     /* srand, rand */
 #include <lib/Attacks/attacks.hpp>
 #include <lib/bitfiddling.h>
-
+#include <userInterface/UIlayer.hpp>
+#include <iostream>
+#include <fstream>
 evaluationResult result;
 
 evaluationResult getEvaluationResult(){
 	return result;
 }
 
+std::ofstream out("/home/vabi/TeX/Chess/positions.tex");
+
+#ifdef EXPERIMENTAL
+uint16_t taperingValues[81] = {  0,  0,  0,  0,  0,  0,  0,  0,
+						       	 0,  0,  0,  0,  0,  0,  0,  0,
+								0, 2, 7, 11, 14, 19, 24, 29,
+								33, 37, 41, 48, 54, 60, 65, 70,
+								75, 80,86,92,97,102,108,112,
+							   118,124,129,134,140,145,150,155,
+							   161,166,173,178,183,189,194,20,
+							   206,212,221,230,236,242,248,254,
+							   256,256,256,256,256,256,256,256,
+							   256,256,256,256,256,256,256,256,256
+};
+#else
 uint16_t taperingValues[81] = {  0,  0,  0,  0,  0,  0,  0,  0,
 						       	 0,  0,  0,  0,  0,  0,  0,  5,
 								10, 15, 20, 25, 30, 35, 40, 45,
@@ -31,7 +48,7 @@ uint16_t taperingValues[81] = {  0,  0,  0,  0,  0,  0,  0,  0,
 							   256,256,256,256,256,256,256,256,
 							   256,256,256,256,256,256,256,256,256
 };
-
+#endif
 static int32_t rookOpenFiles(const chessPosition* position, uint8_t* pawnOccupancy) {
 	int32_t ret = 0;
 
@@ -51,6 +68,8 @@ static int32_t rookOpenFiles(const chessPosition* position, uint8_t* pawnOccupan
 
 extern int16_t endGamepieceTables[7][2][64];
 
+//static uint32_t counter = 0;
+
 int32_t evaluation(const chessPosition* position, int32_t alpha, int32_t beta){
 
 
@@ -138,6 +157,12 @@ int32_t evaluation(const chessPosition* position, int32_t alpha, int32_t beta){
 #ifdef RANDOMEVAL
 	eval = eval+(rand() & 7)-3; //TODO: how is this performance-wise?
 #endif
+	/*counter++;
+	if(counter > 500000){
+		counter = 0;
+		latexOutput(chessPositionToFenString(*position, false), out);
+	}*/
+
 	return (1-2*position->toMove)*eval;
 
 }
diff --git a/Cpp/src/lib/Evaluation/pawnEvaluation.cpp b/Cpp/src/lib/Evaluation/pawnEvaluation.cpp
index e201a27..fdc99fc 100644
--- a/Cpp/src/lib/Evaluation/pawnEvaluation.cpp
+++ b/Cpp/src/lib/Evaluation/pawnEvaluation.cpp
@@ -15,11 +15,10 @@ extern uint64_t files[];
 extern uint64_t  passedPawnMasks[2][64];
 extern uint16_t taperingValues[81];
 
-static short const passedPawnEvalValues[2][64] = {{ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 9, 9, 9, 9, 9, 9, 9, 9, 13, 13, 13, 13, 13, 13, 13, 13,0,0,0,0,0,0,0,0 },
+static int16_t const passedPawnEvalValues[2][64] = {{ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 9, 9, 9, 9, 9, 9, 9, 9, 13, 13, 13, 13, 13, 13, 13, 13,0,0,0,0,0,0,0,0 },
 { 0, 0, 0, 0, 0, 0, 0, 0, 13, 13, 13, 13, 13, 13, 13, 13, 9, 9, 9, 9, 9, 9, 9, 9, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1,0,0,0,0,0,0,0,0 }};
 
 
-
 int32_t passedPawnEval(uint64_t whitePawns, uint64_t blackPawns) {
 
 	int32_t eval = 0;
diff --git a/Cpp/src/lib/moveMaking/moveMaking.cpp b/Cpp/src/lib/moveMaking/moveMaking.cpp
index b66eb47..8842131 100644
--- a/Cpp/src/lib/moveMaking/moveMaking.cpp
+++ b/Cpp/src/lib/moveMaking/moveMaking.cpp
@@ -10,6 +10,7 @@
 #include <iostream>
 #include <lib/DebugFunctions/debugFunctions.hpp>
 #include <hashTables/hashTables.hpp>
+#include <assert.h>
 
 extern int16_t figureValues[];
 extern int32_t completePieceTables[7][2][64];
@@ -29,6 +30,11 @@ void makeNullMove(chessPosition* position){
 	position->zobristHash = position->zobristHash^movingSideHash[0];
 	position->toMove = (playerColor) (1-position->toMove);
 	chessMove move;
+	/*move.move = 0;
+
+	if(position->madeMoves.length > 0) {
+		assert(position->madeMoves[position->madeMoves.length-1].move != 0);
+	}*/
 	position->madeMoves.add(&move);
 }
 
diff --git a/Cpp/src/userInterface/UIfunctions.cpp b/Cpp/src/userInterface/UIfunctions.cpp
index 5217532..716d72a 100644
--- a/Cpp/src/userInterface/UIfunctions.cpp
+++ b/Cpp/src/userInterface/UIfunctions.cpp
@@ -19,11 +19,46 @@
 #include <lib/moveMaking/moveMaking.hpp>
 #include <lib/moveGeneration/moveGeneration.hpp>
 #include <algorithm>
-
+#include <lib/Evaluation/evaluation.hpp>
 static char figureNames[2][6] = {{'P', 'N', 'B', 'R', 'Q', 'K'},
 		{'p', 'n', 'b', 'r', 'q', 'k'},
 };
 
+void putTableLine(std::ostream& out, int16_t value, std::string name) {
+	out << name << " & " << value << "\\\\ \\hline" << std::endl;
+}
+
+void latexOutput(std::string FEN, std::ostream& out) {
+	chessPosition pos = FENtoChessPosition(FEN);
+	int16_t eval = evaluation(&pos, -32000, 32000);
+	evaluationResult ev = getEvaluationResult();
+	int16_t figureVal = calcFigureEvaluation(&pos);
+
+	out << "\\begin{figure}" << std::endl;
+	out << "\\newgame" << std::endl;
+	out << "\\fenboard{"+FEN+"}" << std::endl;
+
+	out << "\\begin{tabular}{ll}" << std::endl;
+	out << "\\raisebox{-.5\\height}{\\showboard}&   \\begin{tabular}{ l | c  }" << std::endl;
+
+	putTableLine(out, eval, "Total");
+	putTableLine(out, figureVal, "Material");
+	putTableLine(out, ev.PSQ-figureVal, "Piece Square Tables");
+	putTableLine(out, ev.mobility, "Mobility");
+	putTableLine(out, ev.kingSafety, "King Safety");
+	putTableLine(out, ev.bishoppair, "Bishop pair");
+	putTableLine(out, ev.staticPawn, "Pawn structure");
+	putTableLine(out, ev.passedPawn, "Passed pawns");
+	putTableLine(out, ev.rookOpenFiles, "Rooks on open files");
+	out << "\\end{tabular}" << std::endl;
+	out << "\\end{tabular}" << std::endl;
+	out << "\\end{figure}" << std::endl;
+
+
+
+
+}
+
 
 uint8_t searchId = 0;
 
@@ -125,7 +160,7 @@ void outputTestResults() { //TODO: integrate properly so that we do not need the
 
 }
 
-std::string chessPositionToString(chessPosition position) {
+std::string chessPositionToString(const chessPosition position) {
 	//Not performance-critical
 	//---------------------------
 	std::string ret = "";
@@ -185,7 +220,7 @@ std::string chessPositionToString(chessPosition position) {
 	return ret;
 }
 
-std::string chessPositionToOutputString(chessPosition position){
+std::string chessPositionToOutputString(const chessPosition position){
 	//Not performance-critical
 	//---------------------------
 	std::string ret = "";
@@ -529,7 +564,7 @@ uint64_t stringToMove(std::string mv){
 }
 
 
-std::string chessPositionToFenString(chessPosition position, bool EPD){
+std::string chessPositionToFenString(const chessPosition position, bool EPD){
 
 	std::string str = chessPositionToString(position);
 	std::string FEN = "";
diff --git a/Cpp/src/userInterface/UIlayer.hpp b/Cpp/src/userInterface/UIlayer.hpp
index 24da972..821e444 100644
--- a/Cpp/src/userInterface/UIlayer.hpp
+++ b/Cpp/src/userInterface/UIlayer.hpp
@@ -12,8 +12,8 @@
 #include <userInterface/interfaceStructs.hpp>
 void UIloop();
 uint32_t searchMove(chessPosition* position, chessMove* bestMove, uint32_t maximal_time, uint32_t* nodeCount, uint64_t* mtime, int32_t* eval, bool doAspiration, searchParameters params);
-std::string chessPositionToString(chessPosition position);
-std::string chessPositionToOutputString(chessPosition position);
+std::string chessPositionToString(const chessPosition position);
+std::string chessPositionToOutputString(const chessPosition position);
 chessPosition stringToChessPosition(std::string strposition);
 chessPosition FENtoChessPosition(std::string fen);
 std::string chessPositionToFenString(chessPosition position, bool EPD=false);
@@ -22,5 +22,6 @@ uint64_t stringToMove(std::string mv);
 bool checkAndMakeMove(chessPosition& position, std::string move);
 void runPerformanceTests();
 uint64_t get_timestamp();
+void latexOutput(std::string FEN, std::ostream& out);
 std::string moveToExtendedString(chessMove move, chessPosition position);
 #endif /* USERINTERFACE_UILAYER_HPP_ */
diff --git a/chessGui/.idea/workspace.xml b/chessGui/.idea/workspace.xml
index 49f2d2a..7151040 100644
--- a/chessGui/.idea/workspace.xml
+++ b/chessGui/.idea/workspace.xml
@@ -95,8 +95,8 @@
       <file leaf-file-name="Main.java" pinned="false" current-in-tab="true">
         <entry file="file://$PROJECT_DIR$/src/sample/Main.java">
           <provider selected="true" editor-type-id="text-editor">
-            <state relative-caret-position="315">
-              <caret line="34" column="35" selection-start-line="34" selection-start-column="35" selection-end-line="34" selection-end-column="35" />
+            <state relative-caret-position="510">
+              <caret line="47" column="47" selection-start-line="47" selection-start-column="34" selection-end-line="47" selection-end-column="47" />
               <folding />
             </state>
           </provider>
@@ -105,8 +105,8 @@
       <file leaf-file-name="UciProcessing.java" pinned="false" current-in-tab="false">
         <entry file="file://$PROJECT_DIR$/src/uciClient/UciProcessing.java">
           <provider selected="true" editor-type-id="text-editor">
-            <state relative-caret-position="2310">
-              <caret line="164" column="59" selection-start-line="164" selection-start-column="59" selection-end-line="164" selection-end-column="59" />
+            <state relative-caret-position="406">
+              <caret line="133" column="28" selection-start-line="133" selection-start-column="28" selection-end-line="133" selection-end-column="28" />
               <folding />
             </state>
           </provider>
@@ -228,8 +228,8 @@
         <option value="$PROJECT_DIR$/src/core/Core.java" />
         <option value="$PROJECT_DIR$/src/PlayingGUI/PlayingController.java" />
         <option value="$PROJECT_DIR$/src/uciClient/uciEngineHandler.java" />
-        <option value="$PROJECT_DIR$/src/uciClient/UciProcessing.java" />
         <option value="$PROJECT_DIR$/src/sample/Main.java" />
+        <option value="$PROJECT_DIR$/src/uciClient/UciProcessing.java" />
       </list>
     </option>
   </component>
@@ -270,7 +270,7 @@
     </navigator>
     <panes>
       <pane id="Scratches" />
-      <pane id="Scope" />
+      <pane id="PackagesPane" />
       <pane id="ProjectPane">
         <subPane>
           <PATH>
@@ -323,7 +323,7 @@
           </PATH>
         </subPane>
       </pane>
-      <pane id="PackagesPane" />
+      <pane id="Scope" />
     </panes>
   </component>
   <component name="PropertiesComponent">
@@ -962,22 +962,6 @@
         </state>
       </provider>
     </entry>
-    <entry file="file://$PROJECT_DIR$/src/sample/Main.java">
-      <provider selected="true" editor-type-id="text-editor">
-        <state relative-caret-position="315">
-          <caret line="34" column="35" selection-start-line="34" selection-start-column="35" selection-end-line="34" selection-end-column="35" />
-          <folding />
-        </state>
-      </provider>
-    </entry>
-    <entry file="file://$PROJECT_DIR$/src/uciClient/UciProcessing.java">
-      <provider selected="true" editor-type-id="text-editor">
-        <state relative-caret-position="2310">
-          <caret line="164" column="59" selection-start-line="164" selection-start-column="59" selection-end-line="164" selection-end-column="59" />
-          <folding />
-        </state>
-      </provider>
-    </entry>
     <entry file="file://$PROJECT_DIR$/src/uciClient/uciEngineHandler.java">
       <provider selected="true" editor-type-id="text-editor">
         <state relative-caret-position="855">
@@ -1018,6 +1002,22 @@
         </state>
       </provider>
     </entry>
+    <entry file="file://$PROJECT_DIR$/src/uciClient/UciProcessing.java">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="406">
+          <caret line="133" column="28" selection-start-line="133" selection-start-column="28" selection-end-line="133" selection-end-column="28" />
+          <folding />
+        </state>
+      </provider>
+    </entry>
+    <entry file="file://$PROJECT_DIR$/src/sample/Main.java">
+      <provider selected="true" editor-type-id="text-editor">
+        <state relative-caret-position="510">
+          <caret line="47" column="47" selection-start-line="47" selection-start-column="34" selection-end-line="47" selection-end-column="47" />
+          <folding />
+        </state>
+      </provider>
+    </entry>
   </component>
   <component name="masterDetails">
     <states>
diff --git a/chessGui/src/uciClient/UciProcessing.java b/chessGui/src/uciClient/UciProcessing.java
index 460514f..fe78cc7 100644
--- a/chessGui/src/uciClient/UciProcessing.java
+++ b/chessGui/src/uciClient/UciProcessing.java
@@ -103,8 +103,8 @@ public class UciProcessing {
 
                 vabiHandler.setPosition(startPos, moves);
                 String current = vabiHandler.getCurrentPosition();
-                VMPchessPosition position = new VMPchessPosition(new VDTstring(current.getBytes()));
-                //server.send(position, 0);
+               /* VMPchessPosition position = new VMPchessPosition(new VDTstring(current.getBytes()));
+                server.send(position, 0);*/
                 vabiHandler.startSearch();
 
 
@@ -122,8 +122,8 @@ public class UciProcessing {
                 moves.add(mv[0]);
                 vabiHandler.setPosition(startPos, moves);
                 current = vabiHandler.getCurrentPosition();
-                position = new VMPchessPosition(new VDTstring(current.getBytes()));
-               // server.send(position, 0);
+                /*position = new VMPchessPosition(new VDTstring(current.getBytes()));
+                server.send(position, 0);*/
                 //System.out.println(mv[0]);
                 stockFishHandler.setPosition(startPos, moves);
                 stockFishHandler.startSearch();
diff --git a/output b/output
deleted file mode 100644
index e69de29..0000000
